{
  "address": "0x11976D208e1F86e26c3A8c5C97d1DB42eF5b44b2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "affiliate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AffiliatePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientGasFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PaidGasFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ReceivedETH",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasFeePaid",
          "type": "uint256"
        }
      ],
      "name": "SwapFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexibleFee",
          "type": "uint256"
        }
      ],
      "name": "SwapSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "affiliate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "affiliateFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexibleFee",
          "type": "uint256"
        }
      ],
      "name": "SwapV3Success",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "penalty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasPaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "TraderPenalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrewETH",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACTION_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "input",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "output",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "feeToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "affiliate",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "affiliatePortion",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feeTokenETHPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dexibleFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gasFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Types.V3Fees",
              "name": "fees",
              "type": "tuple"
            }
          ],
          "internalType": "struct Types.V3Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "startBal",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "_tryV3Swap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "addRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract WNative",
          "name": "native",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositWNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDevTeam",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLockoutBlocks",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenaltyFee",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "devTeam",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "minFee",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "penaltyFee",
              "type": "uint128"
            },
            {
              "internalType": "uint8",
              "name": "lockoutBlocks",
              "type": "uint8"
            }
          ],
          "internalType": "struct Types.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "team",
          "type": "address"
        }
      ],
      "name": "setDevTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "blocks",
          "type": "uint8"
        }
      ],
      "name": "setLockoutBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setMinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "fee",
          "type": "uint128"
        }
      ],
      "name": "setPenaltyFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oldRelay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newRelay",
          "type": "address"
        }
      ],
      "name": "swapRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "input",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint112",
                  "name": "amount",
                  "type": "uint112"
                }
              ],
              "internalType": "struct Types.TokenAmount",
              "name": "output",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "contract IERC20",
                  "name": "feeToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "affiliate",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "affiliatePortion",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "feeTokenETHPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dexibleFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gasFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Types.V3Fees",
              "name": "fees",
              "type": "tuple"
            }
          ],
          "internalType": "struct Types.V3Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "contract IDexRouter",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "v3Fill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4c57ce4635c34b2f08350fc23be4124613795eb8954a635d3dcc0236f2d55c16",
  "receipt": {
    "to": null,
    "from": "0xb631E8650fB4bEfDAe74Ab9f86a9Cb65bC134706",
    "contractAddress": "0x11976D208e1F86e26c3A8c5C97d1DB42eF5b44b2",
    "transactionIndex": 1,
    "gasUsed": "23693210",
    "logsBloom": "0x
    "blockHash": "0x267d5fb6631de7f7739c149381767d75af81106a97a83a936b9cdfa04fba78ed",
    "transactionHash": "0x4c57ce4635c34b2f08350fc23be4124613795eb8954a635d3dcc0236f2d55c16",
    "logs": [],
    "blockNumber": 34238677,
    "cumulativeGasUsed": "23693210",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "9b930149ef396c1443c2a788f51f3e89",
  "metadata": "{\"compiler\":{\"version\":\"0.7.0+commit.9e61f92b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AffiliatePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientGasFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaidGasFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFeePaid\",\"type\":\"uint256\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexibleFee\",\"type\":\"uint256\"}],\"name\":\"SwapSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"affiliateFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexibleFee\",\"type\":\"uint256\"}],\"name\":\"SwapV3Success\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"penalty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"TraderPenalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrewETH\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACTION_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"output\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affiliatePortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenETHPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexibleFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.V3Fees\",\"name\":\"fees\",\"type\":\"tuple\"}],\"internalType\":\"struct Types.V3Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startBal\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"_tryV3Swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"addRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract WNative\",\"name\":\"native\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositWNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevTeam\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockoutBlocks\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenaltyFee\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"devTeam\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"minFee\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"penaltyFee\",\"type\":\"uint128\"},{\"internalType\":\"uint8\",\"name\":\"lockoutBlocks\",\"type\":\"uint8\"}],\"internalType\":\"struct Types.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"team\",\"type\":\"address\"}],\"name\":\"setDevTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"blocks\",\"type\":\"uint8\"}],\"name\":\"setLockoutBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setMinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"fee\",\"type\":\"uint128\"}],\"name\":\"setPenaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldRelay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRelay\",\"type\":\"address\"}],\"name\":\"swapRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"input\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"}],\"internalType\":\"struct Types.TokenAmount\",\"name\":\"output\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"affiliate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"affiliatePortion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenETHPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexibleFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFee\",\"type\":\"uint256\"}],\"internalType\":\"struct Types.V3Fees\",\"name\":\"fees\",\"type\":\"tuple\"}],\"internalType\":\"struct Types.V3Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"contract IDexRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"v3Fill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositWNative(address,uint256)\":{\"notice\":\"Team's ability to deposit native token into this contract using wrapped  native asset allowance\"},\"getConfig()\":{\"notice\":\"Get the current configuration struct\"},\"getDevTeam()\":{\"notice\":\"Get the dev team wallet/multi-sig address\"},\"getLockoutBlocks()\":{\"notice\":\"Get the number of blocks to wait before trader can withdraw gas tank funds  marked for withdraw.\"},\"getMinFee()\":{\"notice\":\"Get the minimum fee required for all orders\"},\"getPenaltyFee()\":{\"notice\":\"Get the penalty fee to asses when trader removes tokens or funds after Dexible submits orders on-chain.\"},\"setConfig((address,uint128,uint128,uint8))\":{\"notice\":\"Set the current configuration as a bulk setting\"},\"setDevTeam(address)\":{\"notice\":\"Set the dev team wallet/multi-sig address\"},\"setLockoutBlocks(uint8)\":{\"notice\":\"Set the number of blocks to wait before thawed withdraws are allowed\"},\"setMinFee(uint128)\":{\"notice\":\"Set the minimum fee for an order execution\"},\"setPenaltyFee(uint128)\":{\"notice\":\"Set the penalty assessed when a user removes tokens or gas tank funds\"},\"withdraw(uint256)\":{\"notice\":\"Team's ability to withdraw ETH balance from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Settlement.sol\":\"Settlement\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/BaseAccess.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"./libs/LibAccess.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseAccess {\\n    using LibAccess for Types.AccessControl;\\n    \\n\\n    //bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant ADMIN_ROLE = 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775;\\n    //bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n    bytes32 public constant PAUSER_ROLE = 0x65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a;\\n    //bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = 0x077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7;\\n    //bytes32 public constant ACTION_ROLE = keccak256(\\\"ACTION_ROLE\\\");\\n    bytes32 public constant ACTION_ROLE = 0xd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e;\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function hasRole(bytes32 role, address actor) public view returns (bool) {\\n        return LibStorage.getAccessStorage().hasRole(role, actor);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, _msgSender()), \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"Not pauser\\\");\\n        _;\\n    }\\n\\n    modifier onlyRelay() {\\n        require(hasRole(RELAY_ROLE, _msgSender()), \\\"Not relay\\\");\\n        _;\\n    }\\n\\n    modifier initializer() {\\n        Types.InitControls storage ic = LibStorage.getInitControls();\\n        require(ic.initializing || !ic.initialized, \\\"Already initialized\\\");\\n        \\n        bool tlc = !ic.initializing;\\n        if(tlc) {\\n            ic.initializing = true;\\n            ic.initialized = true;\\n        }\\n        _;\\n        if(tlc) {\\n            ic.initializing = false;\\n        }\\n    }\\n\\n    modifier nonReentrant() {\\n        \\n        require(!LibStorage.getAccessStorage().reentrantFlag, \\\"Attempting to re-enter function recursively\\\");\\n        LibStorage.getAccessStorage().reentrantFlag = true;\\n        _;\\n        LibStorage.getAccessStorage().reentrantFlag = false;\\n    }\\n\\n    //================ MUTATIONS ===============/\\n    \\n    function addRole(bytes32 role, address actor) public onlyAdmin {\\n        _setupRole(role, actor);\\n    }\\n\\n    function swapRelay(address oldRelay, address newRelay) public onlyAdmin {\\n        revokeRole(RELAY_ROLE, oldRelay);\\n        addRole(RELAY_ROLE, newRelay);\\n    }\\n\\n    function revokeRole(bytes32 role, address actor) public onlyAdmin {\\n        LibStorage.getAccessStorage()._revokeRole(role, actor);\\n    }\\n\\n    function _setupRole(bytes32 role, address actor) internal {\\n        LibStorage.getAccessStorage()._addRole(role, actor);\\n    }\\n\\n    function initAccess() internal initializer {\\n        address o = _msgSender();\\n        _setupRole(ADMIN_ROLE, o);\\n        _setupRole(PAUSER_ROLE, o);\\n    }\\n}\",\"keccak256\":\"0x1c6a227e7d4c3d74076b6655fc07a70e7677ea21d525e5eb11399c480f137252\",\"license\":\"Unlicense\"},\"contracts/BaseConfig.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Types.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\nimport \\\"./libs/LibConfig.sol\\\";\\nimport \\\"./BaseAccess.sol\\\";\\n\\nabstract contract BaseConfig is BaseAccess {\\n    using LibConfig for Types.Config;\\n   \\n    /**\\n     * Initialize config settings. This is called at initialization time when contracts \\n     * are first deployed.\\n     */\\n    function initConfig(Types.Config memory config) internal {\\n        LibStorage.getConfigStorage().store(config);\\n        BaseAccess.initAccess();\\n    }\\n\\n    /**\\n     * Get the current configuration struct\\n     */\\n    function getConfig() external view returns (Types.Config memory) {\\n        return LibStorage.getConfigStorage().copy();\\n    }\\n\\n    \\n    \\n    //============== VIEWS ================/\\n    /**\\n     * Get the dev team wallet/multi-sig address\\n     */\\n    function getDevTeam() external view returns (address) {\\n        return LibStorage.getConfigStorage().devTeam;\\n    }\\n\\n    /**\\n     * Get the number of blocks to wait before trader can withdraw gas tank funds \\n     * marked for withdraw.\\n     */\\n    function getLockoutBlocks() external view returns (uint8) {\\n        return LibStorage.getConfigStorage().lockoutBlocks;\\n    }\\n\\n    /**\\n     * Get the minimum fee required for all orders\\n     */\\n    function getMinFee() external view returns (uint128) {\\n        return LibStorage.getConfigStorage().minFee;\\n    }\\n\\n    /**\\n     * Get the penalty fee to asses when trader removes tokens or funds after\\n     * Dexible submits orders on-chain.\\n     */\\n    function getPenaltyFee() external view returns (uint128) {\\n        return LibStorage.getConfigStorage().penaltyFee;\\n    }\\n\\n    //=============== MUTATIONS ============/\\n\\n    /**\\n     * Set the current configuration as a bulk setting\\n     */\\n    function setConfig(Types.Config memory config) public onlyAdmin {\\n        LibStorage.getConfigStorage().store(config);\\n    }\\n\\n    /**\\n     * Set the dev team wallet/multi-sig address\\n     */\\n    function setDevTeam( address team) external onlyAdmin {\\n        LibStorage.getConfigStorage().devTeam = team;\\n    }\\n\\n    /**\\n     * Set the number of blocks to wait before thawed withdraws are allowed\\n     */\\n    function setLockoutBlocks(uint8 blocks) external onlyAdmin {\\n        LibStorage.getConfigStorage().lockoutBlocks = blocks;\\n    }\\n\\n    /**\\n     * Set the minimum fee for an order execution\\n     */\\n    function setMinFee(uint128 fee) external onlyAdmin {\\n        LibStorage.getConfigStorage().minFee = fee;\\n    }\\n\\n    /**\\n     * Set the penalty assessed when a user removes tokens or gas tank funds\\n     */\\n    function setPenaltyFee(uint128 fee) external onlyAdmin {\\n        LibStorage.getConfigStorage().penaltyFee = fee;\\n    }\\n}\",\"keccak256\":\"0xbb12e9ea10c2f4a7fffe36c4ffaa327586d526e995e61a18d13cd95056d8d6ab\",\"license\":\"Unlicense\"},\"contracts/IDexRouter.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * Abstraction of DEX integration with simple fill function.\\n */\\ninterface IDexRouter {\\n\\n    /**\\n     * Fill an order using the given call data details.\\n     */\\n    function fill(Types.Order memory order, bytes calldata swapData) external returns (bool status, string memory failReason);\\n}\",\"keccak256\":\"0x533da7b055fefcaa060117c9a400dd5a2d94c9427f5c1acf2609bc974be744ae\",\"license\":\"Unlicense\"},\"contracts/Settlement.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IDexRouter.sol\\\";\\nimport \\\"./BaseConfig.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./Types.sol\\\";\\nimport \\\"./libs/LibStorage.sol\\\";\\n\\ninterface IERC20Metadata {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface WNative is IERC20 {\\n    function withdraw(uint wad) external; \\n}\\n\\ncontract Settlement is BaseConfig {\\n\\n    using SafeMath for uint256;\\n    using SafeMath for uint112;\\n    using SafeMath for uint128;\\n    using SafeMath for uint;\\n    using SafeERC20 for IERC20;\\n\\n    //============= EVENT DEFS =================/\\n    event TraderPenalized(address indexed trader, \\n                          uint256 penalty, \\n                          uint256 gasPaid, \\n                          string reason);\\n    event SwapFailed(address indexed trader, \\n                     string reason, \\n                     IERC20 feeToken, \\n                     uint gasFeePaid);\\n    event SwapSuccess(address indexed trader,\\n                       uint inputAmount,\\n                       uint outputAmount,\\n                       IERC20 feeToken,\\n                       uint gasFee,\\n                       uint dexibleFee);\\n    event ReceivedETH(address indexed sender, uint amount);\\n    event WithdrewETH(address indexed receiver, uint amount);\\n    event PaidGasFunds(address indexed relay, uint amount);\\n    event InsufficientGasFunds(address indexed relay, uint amount);\\n\\n    event SwapV3Success(address indexed trader,\\n                        address indexed affiliate,\\n                        uint inputAmount,\\n                        uint outputAmount,\\n                        IERC20 feeToken,\\n                        uint gasFee,\\n                        uint affiliateFee,\\n                        uint dexibleFee\\n                        );\\n    event AffiliatePaid(address indexed affiliate, IERC20 token, uint amount);\\n\\n\\n    //============== CONSTANTS ==============/\\n    //gas needed after action executes\\n    uint256 constant OP_GAS = 40_000;\\n\\n    //for final transfers and events\\n    uint256 constant GAS_OVERHEAD = 60_000;\\n\\n    uint16 constant ARBITRUM = 42161;\\n    uint16 constant OPTIMISM = 10;\\n\\n    struct BalTracking {\\n        uint256 beforeIn;\\n        uint256 beforeOut;\\n        uint256 afterIn;\\n        uint256 afterOut;\\n    }\\n\\n    receive() external payable {\\n        emit ReceivedETH(msg.sender, msg.value);\\n    }\\n\\n    function v3Fill(Types.V3Order calldata order, IDexRouter router, bytes calldata data) public onlyRelay nonReentrant {\\n        //the starting gas isn't actually the starting gas since a significant amount has \\n        //already been burned loading the contract and libs\\n        uint256 startGas = gasleft().add(40_000);\\n\\n\\n        //execute fill\\n        (bool success, uint outAmount, string memory failReason) = performV3Fill(order, order.output.token.balanceOf(address(this)), data);\\n\\n        //post-trade actions to transfer fees, etc.\\n        _postV3Actions(order, success, failReason, startGas, outAmount);\\n    }\\n\\n    \\n\\n    /**\\n     * Team's ability to withdraw ETH balance from the contract.\\n     */\\n    function withdraw(uint amount) public onlyAdmin {\\n        require(amount <= address(this).balance, \\\"Insufficient balance to make transfer\\\");\\n        _msgSender().transfer(amount);\\n        emit WithdrewETH(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * Team's ability to deposit native token into this contract using wrapped \\n     * native asset allowance\\n     */\\n    function depositWNative(WNative native, uint amount) public {\\n        uint spend = native.allowance(_msgSender(), address(this));\\n        require(spend >= amount, \\\"Insufficient spend allowance\\\");\\n        native.transferFrom(_msgSender(), address(this), amount);\\n        native.withdraw(amount);\\n    }\\n\\n    // @dev initialize the settlement contract \\n    function initialize(Types.Config memory config) public initializer {\\n        BaseConfig.initConfig(config);\\n    }\\n    \\n    /*----------------------- V3 Updates --------------------------*/\\n    function performV3Fill(Types.V3Order calldata order, uint256 startBal, bytes calldata data) internal \\n    returns (bool success, uint outAmount, string memory failReason) {\\n        //execute action. This is critical that we use our own internal call to actually\\n        //perform swap inside trycatch. This way, transferred funds to router are \\n        //reverted if swap fails\\n\\n        try this._tryV3Swap{\\n            gas: gasleft().sub(OP_GAS)\\n        }(order, startBal, data) returns (bool _success, uint _out, string memory _failReason) {\\n            if(!_success) {\\n                console.log(\\\"FailReason\\\", _failReason);\\n            }\\n            return (_success, _out, _failReason);\\n        } catch Error(string memory err) {\\n            console.log(\\\"Error thrown\\\", err);\\n            success = false;\\n            failReason = err;\\n            outAmount = 0;\\n            console.log(\\\"FailReason\\\", err);\\n        } catch {\\n            console.log(\\\"Unknown problem occurred\\\");\\n            success = false;\\n            outAmount = 0;\\n            failReason = \\\"Unknown fail reason\\\";\\n        }\\n    }\\n\\n    function _tryV3Swap(Types.V3Order calldata order, uint256 startBal, bytes calldata _data) external \\n    returns (bool, uint, string memory) {\\n        require(msg.sender == address(this), \\\"Can only be called by settlement contract\\\");\\n        _preV3Actions(order);\\n\\n        console.log(\\\"Decoding target args\\\");\\n        //call data contains the target address and data to pass to it to execute\\n        (address swapTarget, address allowanceTarget, bytes memory data) = abi.decode(_data, (address,address,bytes));\\n      \\n        console.log(\\\"Approving spend for target\\\", allowanceTarget);\\n        uint spend = order.input.token.allowance(address(this), allowanceTarget);\\n        console.log(\\\"Spend allowance\\\", spend);\\n\\n        //for protocols that require zero-first approvals\\n        if(spend != 0) {\\n            console.log(\\\"0-ing out spend allowance\\\");\\n            order.input.token.safeApprove(allowanceTarget, 0);\\n        } else {\\n            console.log(\\\"Token spend does not need to be 0'd out\\\");\\n        }\\n\\n        //make sure 0x target has approval to spend this contract's tokens\\n        order.input.token.safeApprove(allowanceTarget, order.input.amount);\\n\\n        console.log(\\\"Calling swapTarget\\\", swapTarget);\\n        console.log(\\\"Gas left\\\", gasleft());\\n\\n        (bool s,/*bytes memory returnData*/) = swapTarget.call{gas: gasleft()}(data);\\n        if(!s) {\\n            revert(\\\"Failed to swap\\\");\\n        }\\n\\n        return (true, order.output.token.balanceOf(address(this)).sub(startBal), \\\"\\\"); //abi.decode(returnData, (uint)), \\\"\\\");\\n    }\\n\\n    // @dev perform any pre-swap actions, like transferring tokens to router\\n    function _preV3Actions(Types.V3Order calldata order) internal {\\n        //transfer input tokens to router so it can perform dex trades\\n        console.log(\\\"Transfering input for trading:\\\", order.input.amount);\\n        order.input.token.safeTransferFrom(order.trader, address(this), order.input.amount);\\n        console.log(\\\"Expected output\\\", order.output.amount);\\n    }\\n\\n     function _computeV3GasFee(Types.V3Order calldata order, uint gasUsed) internal view returns (uint gasFee) {\\n        console.log(\\\"---- Computing Fees -----\\\");\\n        uint estGasCost = tx.gasprice * gasUsed;\\n        console.log(\\\"Estimated gas cost\\\", estGasCost);\\n        uint decs = IERC20Metadata(address(order.fees.feeToken)).decimals();\\n        gasFee = (estGasCost.mul(10**decs)).div(order.fees.feeTokenETHPrice);\\n        console.log(\\\"Gas portion in fee token\\\", gasFee);\\n    }\\n\\n    // @dev carry out post-swap actions, transferring funds, etc.\\n    function _postV3Actions(Types.V3Order calldata order, \\n                          bool success, \\n                          string memory failReason, \\n                          uint startGas, \\n                          uint outAmount) internal {\\n\\n        //reimburse relay estimated gas fees. Add a little overhead for the remaining\\n        //ops in this function\\n        console.log(\\\"Start gas\\\", startGas);\\n        console.log(\\\"Gas left\\\", gasleft());\\n\\n        uint256 totalGasUsed = startGas.sub(gasleft()).add(GAS_OVERHEAD);\\n        console.log(\\\"Total gas used\\\", totalGasUsed);\\n\\n        uint256 gasFee = totalGasUsed.mul(tx.gasprice);\\n        uint cid;\\n        assembly {\\n            cid := chainid()\\n        }\\n        if(cid == ARBITRUM) {\\n            //arbitrum gas cost includes a portion for L1 submission. We account for it \\n            //with a multiplier.\\n            gasFee *= 8;\\n        }\\n        console.log(\\\"Gas fee\\\", gasFee);\\n\\n            \\n        //if there is ETH in the contract, reimburse the relay that called the fill function\\n        if(address(this).balance < gasFee) {\\n            console.log(\\\"Cannot reimburse relay since do not have enough funds\\\");\\n            emit InsufficientGasFunds(_msgSender(), gasFee);\\n        } else {\\n            console.log(\\\"Transfering gas fee to relay\\\");\\n            _msgSender().transfer(gasFee);\\n            emit PaidGasFunds(_msgSender(), gasFee);\\n        }\\n       \\n        if(!success) {\\n            _handleV3Failure(order, totalGasUsed, failReason);\\n            return;\\n        } \\n\\n        _handleV3Success(order, outAmount);        \\n    }\\n\\n    function _handleV3Failure(\\n        Types.V3Order calldata order,\\n        uint totalGasUsed,\\n        string memory failReason\\n    ) internal {\\n         //compute fees for failed txn\\n        uint gasInFeeToken = _computeV3GasFee(order, totalGasUsed);\\n\\n\\n        //we still owe the gas fees to the team/relay even though the swap failed. This is because\\n        //the trader may have set slippage too low, thus increasing the chance of failure.\\n        console.log(\\\"Failed gas fee\\\", gasInFeeToken);\\n        if(order.fees.feeToken == order.input.token) {\\n            console.log(\\\"Transferring partial input token to devteam for failure gas fees\\\");\\n            order.fees.feeToken.safeTransferFrom(order.trader, LibStorage.getConfigStorage().devTeam, gasInFeeToken);\\n            emit SwapFailed(order.trader,failReason, order.fees.feeToken, gasInFeeToken);\\n        \\n        } else {\\n            console.log(\\\"Fee token is output; therefore cannot reimburse team for failure gas fees\\\");\\n            emit SwapFailed(order.trader,failReason, order.fees.feeToken, 0);\\n        }\\n        \\n        //tell trader it failed\\n        console.log(\\\"Swap failed\\\");\\n    }\\n\\n    function _handleV3Success(\\n        Types.V3Order calldata order,\\n        uint outAmount\\n    ) internal {\\n\\n        //on success, the gas and bps fee are paid to the dev team\\n        \\n        //gross is delta between starting/ending balance before/after swap\\n        uint grossOut = outAmount;\\n        console.log(\\\"Gross output amount\\\", grossOut);\\n\\n        uint toTrader = 0;\\n        uint total = order.fees.dexibleFee.add(order.fees.affiliatePortion).add(order.fees.gasFee);\\n            \\n        if(order.fees.feeToken == order.input.token) {\\n            //if we take fees from the input token,\\n            //the trader gets all output \\n            toTrader = grossOut;\\n            console.log(\\\"Transferring fees from input token to devTeam/affiliate\\\", total);\\n            \\n            if(order.fees.affiliatePortion > 0) {\\n                console.log(\\\"Transferring amount to affiliate\\\", order.fees.affiliatePortion);\\n                order.fees.feeToken.safeTransferFrom(order.trader, order.fees.affiliate, order.fees.affiliatePortion);\\n                emit AffiliatePaid(order.fees.affiliate, order.fees.feeToken, order.fees.affiliatePortion);\\n            }\\n            order.fees.feeToken.safeTransferFrom(order.trader, LibStorage.getConfigStorage().devTeam, order.fees.dexibleFee.add(order.fees.gasFee));\\n        } else {\\n            //otherwise, trader gets a portion of the output\\n            //and team gets rest\\n            console.log(\\\"Reducing output by fees\\\", total);\\n            toTrader = grossOut.sub(total);\\n\\n            if(order.fees.affiliatePortion > 0) {\\n                console.log(\\\"Transferring amount to affiliate\\\", order.fees.affiliatePortion);\\n                order.fees.feeToken.safeTransfer(order.fees.affiliate, order.fees.affiliatePortion);\\n                emit AffiliatePaid(order.fees.affiliate, order.fees.feeToken, order.fees.affiliatePortion);\\n            }\\n            \\n            //output comes from this contract, not trader for fees\\n            console.log(\\\"Sending fees from output token to team/affiliate\\\", total);\\n            order.fees.feeToken.safeTransfer(LibStorage.getConfigStorage().devTeam, order.fees.dexibleFee.add(order.fees.gasFee));\\n        }\\n        \\n        console.log(\\\"Sending total output to trader\\\", toTrader);\\n        order.output.token.safeTransfer(order.trader, toTrader);\\n\\n        emit SwapV3Success(order.trader,\\n                    order.fees.affiliate,\\n                    order.input.amount,\\n                    toTrader, \\n                    order.fees.feeToken,\\n                    order.fees.gasFee,\\n                    order.fees.affiliatePortion,\\n                    order.fees.dexibleFee); \\n        console.log(\\\"Finished swap\\\");\\n    }\\n\\n}\",\"keccak256\":\"0xceffa5823102a8b6432f97270ebce607e0ea0e12e56f1377c5492d8670cdb457\",\"license\":\"Unlicense\"},\"contracts/Types.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Types {\\n\\n\\n    struct V3Fees {\\n        //token to take fees with\\n        IERC20 feeToken;\\n\\n        //affiliate to pay portion of fees to\\n        address affiliate;\\n\\n        //portion of fees that goes to affiliate\\n        uint affiliatePortion;\\n\\n        //the current eth price of the fee token. Only used if \\n        //txn fails to compute gas fee\\n        uint feeTokenETHPrice;\\n\\n        //amount of fee token to take as the dexible fee\\n        uint dexibleFee;\\n\\n        //pre-determined gas fee for the txn\\n        uint gasFee;\\n    }\\n\\n    struct V3Order {\\n        //trader that owns the order\\n        address trader;\\n\\n        //token being offered\\n        TokenAmount input;\\n\\n        //token wanted\\n        TokenAmount output;\\n\\n        //fee information\\n        V3Fees fees;\\n    }\\n\\n    struct TokenAmount {\\n        IERC20 token;\\n        uint112 amount;\\n    }\\n\\n    //status of order. Only tracked on action from user/miners\\n    enum OrderStatus {\\n        UNDEFINED,\\n        PENDING,\\n        FILLED,\\n        CANCELLED,\\n        PENALIZED\\n    }\\n\\n    struct Order {\\n\\n        //trader that owns the order\\n        address trader;\\n\\n        //the token we are taking as fee\\n        IERC20 feeToken;\\n\\n        //eth price of fee token in 18-decimal units\\n        uint feeTokenETHPrice;\\n\\n        //current price of ETH in USD units\\n        uint ethUSDPrice;\\n\\n        //an estimate of gas to use to fill the order\\n        uint gasEstimate;\\n\\n        //token being offered\\n        TokenAmount input;\\n\\n        //token wanted\\n        TokenAmount output;\\n    }\\n\\n    //============== CONFIG STATE =============/\\n    struct Config {\\n        //dev team address (120b)\\n        address devTeam;\\n\\n        //bps fee expressed as a whole number\\n        uint128 minFee;\\n\\n        //penalty a user faces for removing assets or \\n        //allowances before a trade\\n        uint128 penaltyFee;\\n\\n        //number of blocks to lock stake and order cancellations\\n        uint8 lockoutBlocks;\\n    }\\n\\n    //============== ACCESS STATE =============/\\n    //storage structure of access controls\\n    struct AccessControl {\\n        bool reentrantFlag;\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    //============== INITIALIZATION STATE =============/\\n    struct InitControls {\\n        bool initialized;\\n        bool initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff295150009cc226e470a468695223b52459eab5127299e4b252dba92900cb2\",\"license\":\"Unlicense\"},\"contracts/libs/LibAccess.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Types.sol\\\";\\n\\n\\nlibrary LibAccess {\\n    \\n    function hasRole(Types.AccessControl storage ac, bytes32 role, address actor) external view returns (bool) {\\n        return ac.roles[role][actor];\\n    }\\n\\n    function _addRole(Types.AccessControl storage ac, bytes32 role, address actor) internal  {\\n        ac.roles[role][actor] = true;\\n    }\\n\\n    function _revokeRole(Types.AccessControl storage ac, bytes32 role, address actor) internal  {\\n        delete ac.roles[role][actor];\\n    }\\n}\",\"keccak256\":\"0x30f51b897619d1a661871173b3572497bf68a4e5d7faaf20ebfffe4137c13984\",\"license\":\"Unlicense\"},\"contracts/libs/LibConfig.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\nimport \\\"../Types.sol\\\";\\n\\nlibrary LibConfig {\\n\\n\\n    function store(Types.Config storage cs, Types.Config memory config) public {\\n        cs.devTeam = config.devTeam;\\n        cs.minFee = config.minFee;\\n        cs.penaltyFee = config.penaltyFee;\\n        cs.lockoutBlocks = config.lockoutBlocks;\\n        require(cs.devTeam != address(0), \\\"Invalid dev team address\\\");\\n    }\\n\\n    function copy(Types.Config storage config) public view returns(Types.Config memory) {\\n        Types.Config memory cs;\\n        cs.devTeam = config.devTeam;\\n        cs.minFee = config.minFee;\\n        cs.penaltyFee = config.penaltyFee;\\n        cs.lockoutBlocks = config.lockoutBlocks;\\n        require(cs.devTeam != address(0), \\\"Invalid dev team address\\\");\\n        return cs;\\n    }\\n    \\n\\n    //============== VIEWS ================/\\n    \\n    function getDevTeam(Types.Config storage _config) external view returns (address) {\\n        return _config.devTeam;\\n    }\\n\\n    function getLockoutBlocks(Types.Config storage _config) external view returns (uint8) {\\n        return _config.lockoutBlocks;\\n    }\\n\\n    function getMinFee(Types.Config storage _config) external view returns (uint128) {\\n        return _config.minFee;\\n    }\\n\\n    function getPenaltyFee(Types.Config storage _config) external view returns (uint128) {\\n        return _config.penaltyFee;\\n    }\\n\\n    //=============== MUTATIONS ============/\\n\\n    function setDevTeam(Types.Config storage _config, address team) external{\\n        _config.devTeam = team;\\n    }\\n\\n    function setLockoutBlocks(Types.Config storage _config, uint8 blocks) external{\\n        _config.lockoutBlocks = blocks;\\n    }\\n\\n    function setMinFee(Types.Config storage _config, uint128 fee) external{\\n        _config.minFee = fee;\\n    }\\n\\n    function setPenaltyFee(Types.Config storage _config, uint128 fee) external{\\n        _config.penaltyFee = fee;\\n    }\\n    \\n}\",\"keccak256\":\"0xaadcf6273e853a6057f400790831a95320c40940ecba17f12c6f13c4625f3136\",\"license\":\"Unlicense\"},\"contracts/libs/LibStorage.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Types.sol\\\";\\n\\nlibrary LibStorage {\\n\\n    //keccak256(\\\"com.buidlhub.config.ConfigStorage\\\");\\n    bytes32 constant CONFIG_STORAGE_KEY = 0xf5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b9;\\n\\n     //keccak256(\\\"com.buidlhub.access.AccessControls\\\");\\n    bytes32 constant ACCESS_STORAGE_KEY = 0x3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e9;\\n\\n    //keccak256(\\\"com.buidlhub.init.InitControls\\\");\\n    bytes32 constant INIT_STORAGE_KEY = 0xd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d4741;\\n\\n    //============= STORAGE ACCESSORS ==========/\\n   \\n    function getConfigStorage() internal pure returns (Types.Config storage cs) {\\n        assembly { cs.slot := CONFIG_STORAGE_KEY }\\n    }\\n\\n    function getAccessStorage() internal pure returns (Types.AccessControl storage acs) {\\n        assembly { acs.slot := ACCESS_STORAGE_KEY }\\n    }\\n\\n    function getInitControls() internal pure returns (Types.InitControls storage ic) {\\n        assembly { ic.slot := INIT_STORAGE_KEY }\\n    }\\n}\",\"keccak256\":\"0xfccedc3189a072c7aea9e515018dadf87f8284984b1e6f36d0b058c5876a1c18\",\"license\":\"Unlicense\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506134f4806100206000396000f3fe6080604052600436106101445760003560e01c806373dc63ea116100b6578063c13da0181161006f578063c13da018146103bf578063c3f909d4146103df578063d547741f14610401578063e63ab1e914610421578063e959b38a14610436578063f102669b146104565761018c565b806373dc63ea1461030657806375b238fc14610326578063775506101461033b5780638d3403fd1461035057806391d1485414610370578063b1cf4b0c1461039d5761018c565b806340ee75bb1161010857806340ee75bb146102335780634e1c68291461025357806355a9e2ba146102735780635716d1ce146102a25780635cf34bcf146102c25780636a9447b5146102e45761018c565b8063044218231461019157806327054df6146101bc5780632e1a7d4d146101d1578063334c3c65146101f35780633f51e182146102135761018c565b3661018c57336001600160a01b03167f4103257eaac983ca79a70d28f90dfc4fa16b619bb0c17ee7cab0d4034c279624346040516101829190612bf7565b60405180910390a2005b600080fd5b34801561019d57600080fd5b506101a6610476565b6040516101b39190612bf7565b60405180910390f35b3480156101c857600080fd5b506101a6610488565b3480156101dd57600080fd5b506101f16101ec3660046129f3565b6104ac565b005b3480156101ff57600080fd5b506101f161020e366004612843565b610597565b34801561021f57600080fd5b506101f161022e366004612843565b610640565b34801561023f57600080fd5b506101f161024e366004612652565b6106c6565b34801561025f57600080fd5b506101f161026e3660046129d7565b610726565b34801561027f57600080fd5b5061029361028e36600461296c565b610786565b6040516101b393929190612bcd565b3480156102ae57600080fd5b506101f16102bd366004612818565b610b69565b3480156102ce57600080fd5b506102d7610cff565b6040516101b3919061319a565b3480156102f057600080fd5b506102f9610d1c565b6040516101b39190612b57565b34801561031257600080fd5b506101f1610321366004612907565b610d35565b34801561033257600080fd5b506101a6610e8e565b34801561034757600080fd5b506102d7610ea0565b34801561035c57600080fd5b506101f161036b366004612a23565b610ec3565b34801561037c57600080fd5b5061039061038b3660046127f4565b610f1a565b6040516101b39190612bc2565b3480156103a957600080fd5b506103b2610fb7565b6040516101b391906131ae565b3480156103cb57600080fd5b506101f16103da36600461270e565b610fcd565b3480156103eb57600080fd5b506103f4611037565b6040516101b3919061307f565b34801561040d57600080fd5b506101f161041c3660046127f4565b6110d2565b34801561042d57600080fd5b506101a661111c565b34801561044257600080fd5b506101f16104513660046127f4565b611140565b34801561046257600080fd5b506101f16104713660046129d7565b611180565b6000805160206133ca83398151915281565b7fd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e81565b6104c660008051602061341f83398151915261038b6111ec565b6104eb5760405162461bcd60e51b81526004016104e29061303d565b60405180910390fd5b4781111561050b5760405162461bcd60e51b81526004016104e290612de8565b6105136111ec565b6001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505015801561054b573d6000803e3d6000fd5b506105546111ec565b6001600160a01b03167faa21a47bc8f0df1a253be34a945b1d0a8f458e4da029c0ab59c1fee1e488c0668260405161058c9190612bf7565b60405180910390a250565b6105b160008051602061341f83398151915261038b6111ec565b6105cd5760405162461bcd60e51b81526004016104e29061303d565b6105d56111f0565b6040516321cab0c760e01b8152734D5806D66d4e056d37CCD20133AF8e06A6f5f4e5916321cab0c79161060d9190859060040161308d565b60006040518083038186803b15801561062557600080fd5b505af4158015610639573d6000803e3d6000fd5b5050505050565b600061064a611214565b8054909150610100900460ff16806106645750805460ff16155b6106805760405162461bcd60e51b81526004016104e290612f70565b8054610100900460ff161580156106a857815460ff1961ff0019909116610100171660011782555b6106b183611238565b80156106c157815461ff00191682555b505050565b6106e060008051602061341f83398151915261038b6111ec565b6106fc5760405162461bcd60e51b81526004016104e29061303d565b806107056111f0565b80546001600160a01b0319166001600160a01b039290921691909117905550565b61074060008051602061341f83398151915261038b6111ec565b61075c5760405162461bcd60e51b81526004016104e29061303d565b806107656111f0565b60010180546001600160801b03928316600160801b02921691909117905550565b60008060603330146107aa5760405162461bcd60e51b81526004016104e290612e96565b6107b3876112b3565b6107e8604051806040016040528060148152602001734465636f64696e6720746172676574206172677360601b81525061138d565b60008060606107f98789018961266e565b92509250925061083e6040518060400160405280601a81526020017f417070726f76696e67207370656e6420666f7220746172676574000000000000815250836113d0565b600061085060408c0160208d01612652565b6001600160a01b031663dd62ed3e30856040518363ffffffff1660e01b815260040161087d929190612b6b565b60206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190612a0b565b90506109006040518060400160405280600f81526020016e5370656e6420616c6c6f77616e636560881b81525082611415565b8015610975576109446040518060400160405280601981526020017f302d696e67206f7574207370656e6420616c6c6f77616e63650000000000000081525061138d565b6109708360008d60200160000160208101906109609190612652565b6001600160a01b0316919061145a565b610996565b6109966040518060600160405280602781526020016133a36027913961138d565b6109c9836109aa60608e0160408f016129b0565b6001600160701b03168d60200160000160208101906109609190612652565b6109fd6040518060400160405280601281526020017110d85b1b1a5b99c81cddd85c15185c99d95d60721b815250856113d0565b610a276040518060400160405280600881526020016711d85cc81b19599d60c21b8152505a611415565b6000846001600160a01b03165a84604051610a429190612b3b565b60006040518083038160008787f1925050503d8060008114610a80576040519150601f19603f3d011682016040523d82523d6000602084013e610a85565b606091505b5050905080610aa65760405162461bcd60e51b81526004016104e290612e2d565b6001610b438c8e6060016000016020810190610ac29190612652565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610aed9190612b57565b60206040518083038186803b158015610b0557600080fd5b505afa158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3d9190612a0b565b90611554565b6040518060200160405280600081525097509750975050505050505b9450945094915050565b6000826001600160a01b031663dd62ed3e610b826111ec565b306040518363ffffffff1660e01b8152600401610ba0929190612b6b565b60206040518083038186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190612a0b565b905081811015610c125760405162461bcd60e51b81526004016104e290612edf565b826001600160a01b03166323b872dd610c296111ec565b30856040518463ffffffff1660e01b8152600401610c4993929190612b85565b602060405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9b9190612746565b50604051632e1a7d4d60e01b81526001600160a01b03841690632e1a7d4d90610cc8908590600401612bf7565b600060405180830381600087803b158015610ce257600080fd5b505af1158015610cf6573d6000803e3d6000fd5b50505050505050565b6000610d096111f0565b600101546001600160801b031690505b90565b6000610d266111f0565b546001600160a01b0316905090565b610d4f6000805160206133ca83398151915261038b6111ec565b610d6b5760405162461bcd60e51b81526004016104e290612f16565b610d7361157c565b5460ff1615610d945760405162461bcd60e51b81526004016104e290612cb2565b6001610d9e61157c565b805460ff19169115159190911790556000610dbc619c405a906115a0565b90506000806060610e5888610dd660808201828501612652565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610e019190612b57565b60206040518083038186803b158015610e1957600080fd5b505afa158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e519190612a0b565b88886115c5565b925092509250610e6b8884838786611785565b505050506000610e7961157c565b805460ff191691151591909117905550505050565b60008051602061341f83398151915281565b6000610eaa6111f0565b60010154600160801b90046001600160801b0316919050565b610edd60008051602061341f83398151915261038b6111ec565b610ef95760405162461bcd60e51b81526004016104e29061303d565b80610f026111f0565b600201805460ff191660ff9290921691909117905550565b6000610f2461157c565b604051630f40931b60e41b81527362eCb6e24bD7D53112ebF386718D54A33B3c424E9163f40931b091610f5e919087908790600401613060565b60206040518083038186803b158015610f7657600080fd5b505af4158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190612746565b90505b92915050565b6000610fc16111f0565b6002015460ff16905090565b610fe760008051602061341f83398151915261038b6111ec565b6110035760405162461bcd60e51b81526004016104e29061303d565b61101b6000805160206133ca833981519152836110d2565b6110336000805160206133ca83398151915282611140565b5050565b61103f6125c1565b6110476111f0565b604051636d73f0db60e01b8152734D5806D66d4e056d37CCD20133AF8e06A6f5f4e591636d73f0db9161107d9190600401612bf7565b60806040518083038186803b15801561109557600080fd5b505af41580156110a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cd91906128ab565b905090565b6110ec60008051602061341f83398151915261038b6111ec565b6111085760405162461bcd60e51b81526004016104e29061303d565b611033828261111561157c565b91906119d8565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61115a60008051602061341f83398151915261038b6111ec565b6111765760405162461bcd60e51b81526004016104e29061303d565b6110338282611a07565b61119a60008051602061341f83398151915261038b6111ec565b6111b65760405162461bcd60e51b81526004016104e29061303d565b806111bf6111f0565b60010180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905550565b3390565b7ff5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b990565b7fd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d474190565b6112406111f0565b6040516321cab0c760e01b8152734D5806D66d4e056d37CCD20133AF8e06A6f5f4e5916321cab0c7916112789190859060040161308d565b60006040518083038186803b15801561129057600080fd5b505af41580156112a4573d6000803e3d6000fd5b505050506112b0611a1b565b50565b604080518082018252601e81527f5472616e73666572696e6720696e70757420666f722074726164696e673a00006020820152611308916112fa90606085019085016129b0565b6001600160701b0316611415565b6113536113186020830183612652565b3061132960608501604086016129b0565b6001600160701b03166113426040860160208701612652565b6001600160a01b0316929190611ae4565b60408051808201909152600f81526e115e1c1958dd1959081bdd5d1c1d5d608a1b60208201526112b0906112fa60a08401608085016129b0565b6112b0816040516024016113a19190612c00565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611b0b565b61103382826040516024016113e6929190612c13565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052611b0b565b611033828260405160240161142b929190612c90565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611b0b565b8015806114e25750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906114909030908690600401612b6b565b60206040518083038186803b1580156114a857600080fd5b505afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e09190612a0b565b155b6114fe5760405162461bcd60e51b81526004016104e290612fe7565b6106c18363095ea7b360e01b848460405160240161151d929190612ba9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b2c565b6000828211156115765760405162461bcd60e51b81526004016104e290612d34565b50900390565b7f3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e990565b600082820183811015610fae5760405162461bcd60e51b81526004016104e290612cfd565b6000806060306355a9e2ba6115dd619c405a90611554565b898989896040518663ffffffff1660e01b815260040161160094939291906130a1565b600060405180830381600088803b15801561161a57600080fd5b5087f19350505050801561165057506040513d6000823e601f3d908101601f1916820160405261164d9190810190612762565b60015b6117485761165c613246565b8061166757506116d2565b6116956040518060400160405280600c81526020016b22b93937b9103a343937bbb760a11b81525082611bbb565b60009350809150600092506116cc6040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b81525082611bbb565b50611743565b6117106040518060400160405280601881526020017f556e6b6e6f776e2070726f626c656d206f63637572726564000000000000000081525061138d565b50506040805180820190915260138152722ab735b737bbb7103330b4b6103932b0b9b7b760691b60208201526000915081905b610b5f565b82611779576117796040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b81525082611bbb565b91945092509050610b5f565b6117b06040518060400160405280600981526020016853746172742067617360b81b81525083611415565b6117da6040518060400160405280600881526020016711d85cc81b19599d60c21b8152505a611415565b60006117f361ea606117ed5a8690611554565b906115a0565b90506118256040518060400160405280600e81526020016d151bdd185b0819d85cc81d5cd95960921b81525082611415565b6000611831823a611c00565b90504661a4b1811415611845576008820291505b61186e604051806040016040528060078152602001664761732066656560c81b81525083611415565b814710156118e4576118976040518060600160405280603581526020016133ea6035913961138d565b61189f6111ec565b6001600160a01b03167f4c0d6a438f19dfe41befe161c0bfdfca9f674028133bbaf37749b2d12f8f0dda836040516118d79190612bf7565b60405180910390a26119ac565b6119226040518060400160405280601c81526020017f5472616e73666572696e67206761732066656520746f2072656c61790000000081525061138d565b61192a6111ec565b6001600160a01b03166108fc839081150290604051600060405180830381858888f19350505050158015611962573d6000803e3d6000fd5b5061196b6111ec565b6001600160a01b03167f91d09af90b128f3fb2907042440a531bca49791232cd8f59e1c629d96247d057836040516119a39190612bf7565b60405180910390a25b866119c4576119bc888488611c3a565b505050610639565b6119ce8885611e18565b5050505050505050565b60009182526001909201602090815260408083206001600160a01b03909416835292905220805460ff19169055565b6110338282611a1461157c565b91906122c0565b6000611a25611214565b8054909150610100900460ff1680611a3f5750805460ff16155b611a5b5760405162461bcd60e51b81526004016104e290612f70565b8054610100900460ff16158015611a8357815460ff1961ff0019909116610100171660011782555b6000611a8d6111ec565b9050611aa760008051602061341f83398151915282611a07565b611ad17f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82611a07565b5080156110335750805461ff0019169055565b611b05846323b872dd60e01b85858560405160240161151d93929190612b85565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6060611b81826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122f39092919063ffffffff16565b8051909150156106c15780806020019051810190611b9f9190612746565b6106c15760405162461bcd60e51b81526004016104e290612f9d565b6110338282604051602401611bd1929190612c6b565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052611b0b565b600082611c0f57506000610fb1565b82820282848281611c1c57fe5b0414610fae5760405162461bcd60e51b81526004016104e290612e55565b6000611c46848461230c565b9050611c786040518060400160405280600e81526020016d4661696c6564206761732066656560901b81525082611415565b611c886040850160208601612652565b6001600160a01b0316611ca160c0860160a08701612652565b6001600160a01b03161415611d6957611cd16040518060600160405280604081526020016133336040913961138d565b611d04611ce16020860186612652565b611ce96111f0565b546001600160a01b03168361134260c0890160a08a01612652565b611d116020850185612652565b6001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e83611d4c60c0880160a08901612652565b84604051611d5c93929190612c3d565b60405180910390a2611dec565b611d8a60405180608001604052806049815260200161343f6049913961138d565b611d976020850185612652565b6001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e83611dd260c0880160a08901612652565b6000604051611de393929190612c3d565b60405180910390a25b611b056040518060400160405280600b81526020016a14ddd85c0819985a5b195960aa1b81525061138d565b60408051808201909152601381527211dc9bdcdcc81bdd5d1c1d5d08185b5bdd5b9d606a1b60208201528190611e4e9082611415565b600080611e6d6101408601356117ed61012088013560e08901356115a0565b9050611e7f6040860160208701612652565b6001600160a01b0316611e9860c0870160a08801612652565b6001600160a01b0316141561200257829150611ecc6040518060600160405280603781526020016134886037913982611415565b60e085013515611fb757611f1c6040518060400160405280602081526020017f5472616e7366657272696e6720616d6f756e7420746f20616666696c696174658152508660a00160400135611415565b611f51611f2c6020870187612652565b611f3c60e0880160c08901612652565b60e088013561134260c08a0160a08b01612652565b611f6160e0860160c08701612652565b6001600160a01b03167f1fd11cde99de9e2e6d2bc710c225ae2e03d1e8eece69b0c552c7ae2bb3499a70611f9b60c0880160a08901612652565b604051611fae919060e08a013590612ba9565b60405180910390a25b611ffd611fc76020870187612652565b611fcf6111f0565b546001600160a01b0316611fed6101208901356101408a01356115a0565b61134260c08a0160a08b01612652565b612196565b6120416040518060400160405280601781526020017f5265647563696e67206f7574707574206279206665657300000000000000000081525082611415565b61204b8382611554565b915060e08501351561213b5761209d6040518060400160405280602081526020017f5472616e7366657272696e6720616d6f756e7420746f20616666696c696174658152508660a00160400135611415565b6120d56120b060e0870160c08801612652565b60e08701356120c560c0890160a08a01612652565b6001600160a01b03169190612470565b6120e560e0860160c08701612652565b6001600160a01b03167f1fd11cde99de9e2e6d2bc710c225ae2e03d1e8eece69b0c552c7ae2bb3499a7061211f60c0880160a08901612652565b604051612132919060e08a013590612ba9565b60405180910390a25b61215d6040518060600160405280603081526020016133736030913982611415565b6121966121686111f0565b546001600160a01b03166121866101208801356101408901356115a0565b6120c560c0890160a08a01612652565b6121d56040518060400160405280601e81526020017f53656e64696e6720746f74616c206f757470757420746f20747261646572000081525083611415565b6121f66121e56020870187612652565b836120c56080890160608a01612652565b61220660e0860160c08701612652565b6001600160a01b031661221c6020870187612652565b6001600160a01b03167f729e31e77c59767ea792c7ae2063c6e4275684ac458cfddba999d2f7a78a1fa06122566060890160408a016129b0565b8561226760c08b0160a08c01612652565b60405161228a939291906101408d01359060e08e0135906101208f01359061315e565b60405180910390a36106396040518060400160405280600d81526020016c046696e6973686564207377617609c1b81525061138d565b60009182526001928301602090815260408084206001600160a01b0390931684529190529020805460ff19169091179055565b6060612302848460008561248f565b90505b9392505050565b600061234c6040518060400160405280601981526020017f2d2d2d2d20436f6d707574696e672046656573202d2d2d2d2d0000000000000081525061138d565b604080518082019091526012815271115cdd1a5b585d19590819d85cc818dbdcdd60721b60208201523a8302906123839082611415565b600061239560c0860160a08701612652565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123cd57600080fd5b505afa1580156123e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124059190612a3f565b60ff16905061242761010086013561242184600a85900a611c00565b90612550565b92506124686040518060400160405280601881526020017f47617320706f7274696f6e20696e2066656520746f6b656e000000000000000081525084611415565b505092915050565b6106c18363a9059cbb60e01b848460405160240161151d929190612ba9565b6060824710156124b15760405162461bcd60e51b81526004016104e290612d6b565b6124ba85612582565b6124d65760405162461bcd60e51b81526004016104e290612f39565b60006060866001600160a01b031685876040516124f39190612b3b565b60006040518083038185875af1925050503d8060008114612530576040519150601f19603f3d011682016040523d82523d6000602084013e612535565b606091505b5091509150612545828286612588565b979650505050505050565b60008082116125715760405162461bcd60e51b81526004016104e290612db1565b81838161257a57fe5b049392505050565b3b151590565b60608315612597575081612305565b8251156125a75782518084602001fd5b8160405162461bcd60e51b81526004016104e29190612c00565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60008083601f8401126125f9578182fd5b50813567ffffffffffffffff811115612610578182fd5b60208301915083602082850101111561262857600080fd5b9250929050565b8035610fb1816132eb565b6000610160828403121561264c578081fd5b50919050565b600060208284031215612663578081fd5b8135610fae816132eb565b600080600060608486031215612682578182fd5b833561268d816132eb565b9250602084013561269d816132eb565b9150604084013567ffffffffffffffff8111156126b8578182fd5b8401601f810186136126c8578182fd5b80356126db6126d6826131e3565b6131bc565b8181528760208385010111156126ef578384fd5b8160208401602083013783602083830101528093505050509250925092565b60008060408385031215612720578182fd5b823561272b816132eb565b9150602083013561273b816132eb565b809150509250929050565b600060208284031215612757578081fd5b8151610fae81613300565b600080600060608486031215612776578283fd5b835161278181613300565b60208501516040860151919450925067ffffffffffffffff8111156127a4578182fd5b8401601f810186136127b4578182fd5b80516127c26126d6826131e3565b8181528760208385010111156127d6578384fd5b6127e7826020830160208601613214565b8093505050509250925092565b60008060408385031215612806578182fd5b82359150602083013561273b816132eb565b6000806040838503121561282a578182fd5b8235612835816132eb565b946020939093013593505050565b600060808284031215612854578081fd5b61285e60806131bc565b8235612869816132eb565b815260208301356128798161330e565b6020820152604083013561288c8161330e565b6040820152606083013561289f81613323565b60608201529392505050565b6000608082840312156128bc578081fd5b6128c660806131bc565b82516128d1816132eb565b815260208301516128e18161330e565b602082015260408301516128f48161330e565b6040820152606083015161289f81613323565b6000806000806101a0858703121561291d578182fd5b612927868661263a565b9350610160850135612938816132eb565b925061018085013567ffffffffffffffff811115612954578283fd5b612960878288016125e8565b95989497509550505050565b6000806000806101a08587031215612982578182fd5b61298c868661263a565b9350610160850135925061018085013567ffffffffffffffff811115612954578283fd5b6000602082840312156129c1578081fd5b81356001600160701b0381168114610fae578182fd5b6000602082840312156129e8578081fd5b8135610fae8161330e565b600060208284031215612a04578081fd5b5035919050565b600060208284031215612a1c578081fd5b5051919050565b600060208284031215612a34578081fd5b8135610fae81613323565b600060208284031215612a50578081fd5b8151610fae81613323565b6001600160a01b03169052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612aaa816020860160208601613214565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160801b03908116918401919091526040808301519091169083015260609081015160ff16910152565b8035612b09816132eb565b6001600160a01b0316825260208101356001600160701b038116808214612b2f57600080fd5b80602085015250505050565b60008251612b4d818460208701613214565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000841515825283602083015260606040830152612bee6060830184612a92565b95945050505050565b90815260200190565b600060208252610fae6020830184612a92565b600060408252612c266040830185612a92565b905060018060a01b03831660208301529392505050565b600060608252612c506060830186612a92565b6001600160a01b039490941660208301525060400152919050565b600060408252612c7e6040830185612a92565b8281036020840152612bee8185612a92565b600060408252612ca36040830185612a92565b90508260208301529392505050565b6020808252602b908201527f417474656d7074696e6720746f2072652d656e7465722066756e6374696f6e2060408201526a7265637572736976656c7960a81b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526025908201527f496e73756666696369656e742062616c616e636520746f206d616b65207472616040820152643739b332b960d91b606082015260800190565b6020808252600e908201526d04661696c656420746f20737761760941b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526029908201527f43616e206f6e6c792062652063616c6c656420627920736574746c656d656e746040820152680818dbdb9d1c9858dd60ba1b606082015260800190565b6020808252601c908201527f496e73756666696369656e74207370656e6420616c6c6f77616e636500000000604082015260600190565b6020808252600990820152684e6f742072656c617960b81b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b6020808252600990820152682737ba1030b236b4b760b91b604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b60808101610fb18284612abe565b82815260a081016123056020830184612abe565b60006101a086356130b1816132eb565b6001600160a01b031683526130cc6020808501908901612afe565b6130dc6060840160608901612afe565b60a0870160c088016130fa60a086016130f5838561262f565b612a5b565b6131048183613207565b91505061311460c0850182612a5b565b5060e087013560e084015261010080880135818501525061012080880135818501525061014080880135818501525085610160840152806101808401526125458184018587612a68565b6001600160701b0396909616865260208601949094526001600160a01b039290921660408501526060840152608083015260a082015260c00190565b6001600160801b0391909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156131db57600080fd5b604052919050565b600067ffffffffffffffff8211156131f9578081fd5b50601f01601f191660200190565b60008235610fae816132eb565b60005b8381101561322f578181015183820152602001613217565b83811115611b055750506000910152565b60e01c90565b600060443d101561325657610d19565b600481823e6308c379a061326a8251613240565b1461327457610d19565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156132a45750505050610d19565b828401925082519150808211156132be5750505050610d19565b503d830160208284010111156132d657505050610d19565b601f01601f1916810160200160405291505090565b6001600160a01b03811681146112b057600080fd5b80151581146112b057600080fd5b6001600160801b03811681146112b057600080fd5b60ff811681146112b057600080fdfe5472616e7366657272696e67207061727469616c20696e70757420746f6b656e20746f206465767465616d20666f72206661696c75726520676173206665657353656e64696e6720666565732066726f6d206f757470757420746f6b656e20746f207465616d2f616666696c69617465546f6b656e207370656e6420646f6573206e6f74206e65656420746f20626520302764206f7574077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d743616e6e6f74207265696d62757273652072656c61792073696e636520646f206e6f74206861766520656e6f7567682066756e6473a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177546656520746f6b656e206973206f75747075743b207468657265666f72652063616e6e6f74207265696d6275727365207465616d20666f72206661696c7572652067617320666565735472616e7366657272696e6720666565732066726f6d20696e70757420746f6b656e20746f206465765465616d2f616666696c69617465a2646970667358221220f6626f87017323f06b642e56ca1f77e867d541754eed2889887db1a9355684a064736f6c63430007000033",
  "deployedBytecode": "0x6080604052600436106101445760003560e01c806373dc63ea116100b6578063c13da0181161006f578063c13da018146103bf578063c3f909d4146103df578063d547741f14610401578063e63ab1e914610421578063e959b38a14610436578063f102669b146104565761018c565b806373dc63ea1461030657806375b238fc14610326578063775506101461033b5780638d3403fd1461035057806391d1485414610370578063b1cf4b0c1461039d5761018c565b806340ee75bb1161010857806340ee75bb146102335780634e1c68291461025357806355a9e2ba146102735780635716d1ce146102a25780635cf34bcf146102c25780636a9447b5146102e45761018c565b8063044218231461019157806327054df6146101bc5780632e1a7d4d146101d1578063334c3c65146101f35780633f51e182146102135761018c565b3661018c57336001600160a01b03167f4103257eaac983ca79a70d28f90dfc4fa16b619bb0c17ee7cab0d4034c279624346040516101829190612bf7565b60405180910390a2005b600080fd5b34801561019d57600080fd5b506101a6610476565b6040516101b39190612bf7565b60405180910390f35b3480156101c857600080fd5b506101a6610488565b3480156101dd57600080fd5b506101f16101ec3660046129f3565b6104ac565b005b3480156101ff57600080fd5b506101f161020e366004612843565b610597565b34801561021f57600080fd5b506101f161022e366004612843565b610640565b34801561023f57600080fd5b506101f161024e366004612652565b6106c6565b34801561025f57600080fd5b506101f161026e3660046129d7565b610726565b34801561027f57600080fd5b5061029361028e36600461296c565b610786565b6040516101b393929190612bcd565b3480156102ae57600080fd5b506101f16102bd366004612818565b610b69565b3480156102ce57600080fd5b506102d7610cff565b6040516101b3919061319a565b3480156102f057600080fd5b506102f9610d1c565b6040516101b39190612b57565b34801561031257600080fd5b506101f1610321366004612907565b610d35565b34801561033257600080fd5b506101a6610e8e565b34801561034757600080fd5b506102d7610ea0565b34801561035c57600080fd5b506101f161036b366004612a23565b610ec3565b34801561037c57600080fd5b5061039061038b3660046127f4565b610f1a565b6040516101b39190612bc2565b3480156103a957600080fd5b506103b2610fb7565b6040516101b391906131ae565b3480156103cb57600080fd5b506101f16103da36600461270e565b610fcd565b3480156103eb57600080fd5b506103f4611037565b6040516101b3919061307f565b34801561040d57600080fd5b506101f161041c3660046127f4565b6110d2565b34801561042d57600080fd5b506101a661111c565b34801561044257600080fd5b506101f16104513660046127f4565b611140565b34801561046257600080fd5b506101f16104713660046129d7565b611180565b6000805160206133ca83398151915281565b7fd95061bdf0c43d77b6cbe1c15072292976244ec8d5012de75baa36e42da4625e81565b6104c660008051602061341f83398151915261038b6111ec565b6104eb5760405162461bcd60e51b81526004016104e29061303d565b60405180910390fd5b4781111561050b5760405162461bcd60e51b81526004016104e290612de8565b6105136111ec565b6001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505015801561054b573d6000803e3d6000fd5b506105546111ec565b6001600160a01b03167faa21a47bc8f0df1a253be34a945b1d0a8f458e4da029c0ab59c1fee1e488c0668260405161058c9190612bf7565b60405180910390a250565b6105b160008051602061341f83398151915261038b6111ec565b6105cd5760405162461bcd60e51b81526004016104e29061303d565b6105d56111f0565b6040516321cab0c760e01b815273__$015d7794271f690550e5fe4793e4b79169$__916321cab0c79161060d9190859060040161308d565b60006040518083038186803b15801561062557600080fd5b505af4158015610639573d6000803e3d6000fd5b5050505050565b600061064a611214565b8054909150610100900460ff16806106645750805460ff16155b6106805760405162461bcd60e51b81526004016104e290612f70565b8054610100900460ff161580156106a857815460ff1961ff0019909116610100171660011782555b6106b183611238565b80156106c157815461ff00191682555b505050565b6106e060008051602061341f83398151915261038b6111ec565b6106fc5760405162461bcd60e51b81526004016104e29061303d565b806107056111f0565b80546001600160a01b0319166001600160a01b039290921691909117905550565b61074060008051602061341f83398151915261038b6111ec565b61075c5760405162461bcd60e51b81526004016104e29061303d565b806107656111f0565b60010180546001600160801b03928316600160801b02921691909117905550565b60008060603330146107aa5760405162461bcd60e51b81526004016104e290612e96565b6107b3876112b3565b6107e8604051806040016040528060148152602001734465636f64696e6720746172676574206172677360601b81525061138d565b60008060606107f98789018961266e565b92509250925061083e6040518060400160405280601a81526020017f417070726f76696e67207370656e6420666f7220746172676574000000000000815250836113d0565b600061085060408c0160208d01612652565b6001600160a01b031663dd62ed3e30856040518363ffffffff1660e01b815260040161087d929190612b6b565b60206040518083038186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cd9190612a0b565b90506109006040518060400160405280600f81526020016e5370656e6420616c6c6f77616e636560881b81525082611415565b8015610975576109446040518060400160405280601981526020017f302d696e67206f7574207370656e6420616c6c6f77616e63650000000000000081525061138d565b6109708360008d60200160000160208101906109609190612652565b6001600160a01b0316919061145a565b610996565b6109966040518060600160405280602781526020016133a36027913961138d565b6109c9836109aa60608e0160408f016129b0565b6001600160701b03168d60200160000160208101906109609190612652565b6109fd6040518060400160405280601281526020017110d85b1b1a5b99c81cddd85c15185c99d95d60721b815250856113d0565b610a276040518060400160405280600881526020016711d85cc81b19599d60c21b8152505a611415565b6000846001600160a01b03165a84604051610a429190612b3b565b60006040518083038160008787f1925050503d8060008114610a80576040519150601f19603f3d011682016040523d82523d6000602084013e610a85565b606091505b5050905080610aa65760405162461bcd60e51b81526004016104e290612e2d565b6001610b438c8e6060016000016020810190610ac29190612652565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610aed9190612b57565b60206040518083038186803b158015610b0557600080fd5b505afa158015610b19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3d9190612a0b565b90611554565b6040518060200160405280600081525097509750975050505050505b9450945094915050565b6000826001600160a01b031663dd62ed3e610b826111ec565b306040518363ffffffff1660e01b8152600401610ba0929190612b6b565b60206040518083038186803b158015610bb857600080fd5b505afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190612a0b565b905081811015610c125760405162461bcd60e51b81526004016104e290612edf565b826001600160a01b03166323b872dd610c296111ec565b30856040518463ffffffff1660e01b8152600401610c4993929190612b85565b602060405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9b9190612746565b50604051632e1a7d4d60e01b81526001600160a01b03841690632e1a7d4d90610cc8908590600401612bf7565b600060405180830381600087803b158015610ce257600080fd5b505af1158015610cf6573d6000803e3d6000fd5b50505050505050565b6000610d096111f0565b600101546001600160801b031690505b90565b6000610d266111f0565b546001600160a01b0316905090565b610d4f6000805160206133ca83398151915261038b6111ec565b610d6b5760405162461bcd60e51b81526004016104e290612f16565b610d7361157c565b5460ff1615610d945760405162461bcd60e51b81526004016104e290612cb2565b6001610d9e61157c565b805460ff19169115159190911790556000610dbc619c405a906115a0565b90506000806060610e5888610dd660808201828501612652565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610e019190612b57565b60206040518083038186803b158015610e1957600080fd5b505afa158015610e2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e519190612a0b565b88886115c5565b925092509250610e6b8884838786611785565b505050506000610e7961157c565b805460ff191691151591909117905550505050565b60008051602061341f83398151915281565b6000610eaa6111f0565b60010154600160801b90046001600160801b0316919050565b610edd60008051602061341f83398151915261038b6111ec565b610ef95760405162461bcd60e51b81526004016104e29061303d565b80610f026111f0565b600201805460ff191660ff9290921691909117905550565b6000610f2461157c565b604051630f40931b60e41b815273__$712f9bd20561de4f0bfbc1442284f16fb4$__9163f40931b091610f5e919087908790600401613060565b60206040518083038186803b158015610f7657600080fd5b505af4158015610f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fae9190612746565b90505b92915050565b6000610fc16111f0565b6002015460ff16905090565b610fe760008051602061341f83398151915261038b6111ec565b6110035760405162461bcd60e51b81526004016104e29061303d565b61101b6000805160206133ca833981519152836110d2565b6110336000805160206133ca83398151915282611140565b5050565b61103f6125c1565b6110476111f0565b604051636d73f0db60e01b815273__$015d7794271f690550e5fe4793e4b79169$__91636d73f0db9161107d9190600401612bf7565b60806040518083038186803b15801561109557600080fd5b505af41580156110a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110cd91906128ab565b905090565b6110ec60008051602061341f83398151915261038b6111ec565b6111085760405162461bcd60e51b81526004016104e29061303d565b611033828261111561157c565b91906119d8565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b61115a60008051602061341f83398151915261038b6111ec565b6111765760405162461bcd60e51b81526004016104e29061303d565b6110338282611a07565b61119a60008051602061341f83398151915261038b6111ec565b6111b65760405162461bcd60e51b81526004016104e29061303d565b806111bf6111f0565b60010180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905550565b3390565b7ff5b4be0a744c821d14f78bf26d55a308f420d78cebbfac103f2618fba32917b990565b7fd59dd79cfd4373c6c6547848d91fc2ea67c8aec9053f7028828216c5af1d474190565b6112406111f0565b6040516321cab0c760e01b815273__$015d7794271f690550e5fe4793e4b79169$__916321cab0c7916112789190859060040161308d565b60006040518083038186803b15801561129057600080fd5b505af41580156112a4573d6000803e3d6000fd5b505050506112b0611a1b565b50565b604080518082018252601e81527f5472616e73666572696e6720696e70757420666f722074726164696e673a00006020820152611308916112fa90606085019085016129b0565b6001600160701b0316611415565b6113536113186020830183612652565b3061132960608501604086016129b0565b6001600160701b03166113426040860160208701612652565b6001600160a01b0316929190611ae4565b60408051808201909152600f81526e115e1c1958dd1959081bdd5d1c1d5d608a1b60208201526112b0906112fa60a08401608085016129b0565b6112b0816040516024016113a19190612c00565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052611b0b565b61103382826040516024016113e6929190612c13565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052611b0b565b611033828260405160240161142b929190612c90565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052611b0b565b8015806114e25750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906114909030908690600401612b6b565b60206040518083038186803b1580156114a857600080fd5b505afa1580156114bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e09190612a0b565b155b6114fe5760405162461bcd60e51b81526004016104e290612fe7565b6106c18363095ea7b360e01b848460405160240161151d929190612ba9565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611b2c565b6000828211156115765760405162461bcd60e51b81526004016104e290612d34565b50900390565b7f3a83b1278d351a40f18bb9e8e77896e8c1dc812ffaed5ea63e0e837a6dae57e990565b600082820183811015610fae5760405162461bcd60e51b81526004016104e290612cfd565b6000806060306355a9e2ba6115dd619c405a90611554565b898989896040518663ffffffff1660e01b815260040161160094939291906130a1565b600060405180830381600088803b15801561161a57600080fd5b5087f19350505050801561165057506040513d6000823e601f3d908101601f1916820160405261164d9190810190612762565b60015b6117485761165c613246565b8061166757506116d2565b6116956040518060400160405280600c81526020016b22b93937b9103a343937bbb760a11b81525082611bbb565b60009350809150600092506116cc6040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b81525082611bbb565b50611743565b6117106040518060400160405280601881526020017f556e6b6e6f776e2070726f626c656d206f63637572726564000000000000000081525061138d565b50506040805180820190915260138152722ab735b737bbb7103330b4b6103932b0b9b7b760691b60208201526000915081905b610b5f565b82611779576117796040518060400160405280600a8152602001692330b4b62932b0b9b7b760b11b81525082611bbb565b91945092509050610b5f565b6117b06040518060400160405280600981526020016853746172742067617360b81b81525083611415565b6117da6040518060400160405280600881526020016711d85cc81b19599d60c21b8152505a611415565b60006117f361ea606117ed5a8690611554565b906115a0565b90506118256040518060400160405280600e81526020016d151bdd185b0819d85cc81d5cd95960921b81525082611415565b6000611831823a611c00565b90504661a4b1811415611845576008820291505b61186e604051806040016040528060078152602001664761732066656560c81b81525083611415565b814710156118e4576118976040518060600160405280603581526020016133ea6035913961138d565b61189f6111ec565b6001600160a01b03167f4c0d6a438f19dfe41befe161c0bfdfca9f674028133bbaf37749b2d12f8f0dda836040516118d79190612bf7565b60405180910390a26119ac565b6119226040518060400160405280601c81526020017f5472616e73666572696e67206761732066656520746f2072656c61790000000081525061138d565b61192a6111ec565b6001600160a01b03166108fc839081150290604051600060405180830381858888f19350505050158015611962573d6000803e3d6000fd5b5061196b6111ec565b6001600160a01b03167f91d09af90b128f3fb2907042440a531bca49791232cd8f59e1c629d96247d057836040516119a39190612bf7565b60405180910390a25b866119c4576119bc888488611c3a565b505050610639565b6119ce8885611e18565b5050505050505050565b60009182526001909201602090815260408083206001600160a01b03909416835292905220805460ff19169055565b6110338282611a1461157c565b91906122c0565b6000611a25611214565b8054909150610100900460ff1680611a3f5750805460ff16155b611a5b5760405162461bcd60e51b81526004016104e290612f70565b8054610100900460ff16158015611a8357815460ff1961ff0019909116610100171660011782555b6000611a8d6111ec565b9050611aa760008051602061341f83398151915282611a07565b611ad17f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a82611a07565b5080156110335750805461ff0019169055565b611b05846323b872dd60e01b85858560405160240161151d93929190612b85565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6060611b81826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122f39092919063ffffffff16565b8051909150156106c15780806020019051810190611b9f9190612746565b6106c15760405162461bcd60e51b81526004016104e290612f9d565b6110338282604051602401611bd1929190612c6b565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052611b0b565b600082611c0f57506000610fb1565b82820282848281611c1c57fe5b0414610fae5760405162461bcd60e51b81526004016104e290612e55565b6000611c46848461230c565b9050611c786040518060400160405280600e81526020016d4661696c6564206761732066656560901b81525082611415565b611c886040850160208601612652565b6001600160a01b0316611ca160c0860160a08701612652565b6001600160a01b03161415611d6957611cd16040518060600160405280604081526020016133336040913961138d565b611d04611ce16020860186612652565b611ce96111f0565b546001600160a01b03168361134260c0890160a08a01612652565b611d116020850185612652565b6001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e83611d4c60c0880160a08901612652565b84604051611d5c93929190612c3d565b60405180910390a2611dec565b611d8a60405180608001604052806049815260200161343f6049913961138d565b611d976020850185612652565b6001600160a01b03167f9f52afa9b861b0c4b200f58dace31f1f5776b94207a3047c075d6a087e25de5e83611dd260c0880160a08901612652565b6000604051611de393929190612c3d565b60405180910390a25b611b056040518060400160405280600b81526020016a14ddd85c0819985a5b195960aa1b81525061138d565b60408051808201909152601381527211dc9bdcdcc81bdd5d1c1d5d08185b5bdd5b9d606a1b60208201528190611e4e9082611415565b600080611e6d6101408601356117ed61012088013560e08901356115a0565b9050611e7f6040860160208701612652565b6001600160a01b0316611e9860c0870160a08801612652565b6001600160a01b0316141561200257829150611ecc6040518060600160405280603781526020016134886037913982611415565b60e085013515611fb757611f1c6040518060400160405280602081526020017f5472616e7366657272696e6720616d6f756e7420746f20616666696c696174658152508660a00160400135611415565b611f51611f2c6020870187612652565b611f3c60e0880160c08901612652565b60e088013561134260c08a0160a08b01612652565b611f6160e0860160c08701612652565b6001600160a01b03167f1fd11cde99de9e2e6d2bc710c225ae2e03d1e8eece69b0c552c7ae2bb3499a70611f9b60c0880160a08901612652565b604051611fae919060e08a013590612ba9565b60405180910390a25b611ffd611fc76020870187612652565b611fcf6111f0565b546001600160a01b0316611fed6101208901356101408a01356115a0565b61134260c08a0160a08b01612652565b612196565b6120416040518060400160405280601781526020017f5265647563696e67206f7574707574206279206665657300000000000000000081525082611415565b61204b8382611554565b915060e08501351561213b5761209d6040518060400160405280602081526020017f5472616e7366657272696e6720616d6f756e7420746f20616666696c696174658152508660a00160400135611415565b6120d56120b060e0870160c08801612652565b60e08701356120c560c0890160a08a01612652565b6001600160a01b03169190612470565b6120e560e0860160c08701612652565b6001600160a01b03167f1fd11cde99de9e2e6d2bc710c225ae2e03d1e8eece69b0c552c7ae2bb3499a7061211f60c0880160a08901612652565b604051612132919060e08a013590612ba9565b60405180910390a25b61215d6040518060600160405280603081526020016133736030913982611415565b6121966121686111f0565b546001600160a01b03166121866101208801356101408901356115a0565b6120c560c0890160a08a01612652565b6121d56040518060400160405280601e81526020017f53656e64696e6720746f74616c206f757470757420746f20747261646572000081525083611415565b6121f66121e56020870187612652565b836120c56080890160608a01612652565b61220660e0860160c08701612652565b6001600160a01b031661221c6020870187612652565b6001600160a01b03167f729e31e77c59767ea792c7ae2063c6e4275684ac458cfddba999d2f7a78a1fa06122566060890160408a016129b0565b8561226760c08b0160a08c01612652565b60405161228a939291906101408d01359060e08e0135906101208f01359061315e565b60405180910390a36106396040518060400160405280600d81526020016c046696e6973686564207377617609c1b81525061138d565b60009182526001928301602090815260408084206001600160a01b0390931684529190529020805460ff19169091179055565b6060612302848460008561248f565b90505b9392505050565b600061234c6040518060400160405280601981526020017f2d2d2d2d20436f6d707574696e672046656573202d2d2d2d2d0000000000000081525061138d565b604080518082019091526012815271115cdd1a5b585d19590819d85cc818dbdcdd60721b60208201523a8302906123839082611415565b600061239560c0860160a08701612652565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123cd57600080fd5b505afa1580156123e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124059190612a3f565b60ff16905061242761010086013561242184600a85900a611c00565b90612550565b92506124686040518060400160405280601881526020017f47617320706f7274696f6e20696e2066656520746f6b656e000000000000000081525084611415565b505092915050565b6106c18363a9059cbb60e01b848460405160240161151d929190612ba9565b6060824710156124b15760405162461bcd60e51b81526004016104e290612d6b565b6124ba85612582565b6124d65760405162461bcd60e51b81526004016104e290612f39565b60006060866001600160a01b031685876040516124f39190612b3b565b60006040518083038185875af1925050503d8060008114612530576040519150601f19603f3d011682016040523d82523d6000602084013e612535565b606091505b5091509150612545828286612588565b979650505050505050565b60008082116125715760405162461bcd60e51b81526004016104e290612db1565b81838161257a57fe5b049392505050565b3b151590565b60608315612597575081612305565b8251156125a75782518084602001fd5b8160405162461bcd60e51b81526004016104e29190612c00565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60008083601f8401126125f9578182fd5b50813567ffffffffffffffff811115612610578182fd5b60208301915083602082850101111561262857600080fd5b9250929050565b8035610fb1816132eb565b6000610160828403121561264c578081fd5b50919050565b600060208284031215612663578081fd5b8135610fae816132eb565b600080600060608486031215612682578182fd5b833561268d816132eb565b9250602084013561269d816132eb565b9150604084013567ffffffffffffffff8111156126b8578182fd5b8401601f810186136126c8578182fd5b80356126db6126d6826131e3565b6131bc565b8181528760208385010111156126ef578384fd5b8160208401602083013783602083830101528093505050509250925092565b60008060408385031215612720578182fd5b823561272b816132eb565b9150602083013561273b816132eb565b809150509250929050565b600060208284031215612757578081fd5b8151610fae81613300565b600080600060608486031215612776578283fd5b835161278181613300565b60208501516040860151919450925067ffffffffffffffff8111156127a4578182fd5b8401601f810186136127b4578182fd5b80516127c26126d6826131e3565b8181528760208385010111156127d6578384fd5b6127e7826020830160208601613214565b8093505050509250925092565b60008060408385031215612806578182fd5b82359150602083013561273b816132eb565b6000806040838503121561282a578182fd5b8235612835816132eb565b946020939093013593505050565b600060808284031215612854578081fd5b61285e60806131bc565b8235612869816132eb565b815260208301356128798161330e565b6020820152604083013561288c8161330e565b6040820152606083013561289f81613323565b60608201529392505050565b6000608082840312156128bc578081fd5b6128c660806131bc565b82516128d1816132eb565b815260208301516128e18161330e565b602082015260408301516128f48161330e565b6040820152606083015161289f81613323565b6000806000806101a0858703121561291d578182fd5b612927868661263a565b9350610160850135612938816132eb565b925061018085013567ffffffffffffffff811115612954578283fd5b612960878288016125e8565b95989497509550505050565b6000806000806101a08587031215612982578182fd5b61298c868661263a565b9350610160850135925061018085013567ffffffffffffffff811115612954578283fd5b6000602082840312156129c1578081fd5b81356001600160701b0381168114610fae578182fd5b6000602082840312156129e8578081fd5b8135610fae8161330e565b600060208284031215612a04578081fd5b5035919050565b600060208284031215612a1c578081fd5b5051919050565b600060208284031215612a34578081fd5b8135610fae81613323565b600060208284031215612a50578081fd5b8151610fae81613323565b6001600160a01b03169052565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612aaa816020860160208601613214565b601f01601f19169290920160200192915050565b80516001600160a01b031682526020808201516001600160801b03908116918401919091526040808301519091169083015260609081015160ff16910152565b8035612b09816132eb565b6001600160a01b0316825260208101356001600160701b038116808214612b2f57600080fd5b80602085015250505050565b60008251612b4d818460208701613214565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000841515825283602083015260606040830152612bee6060830184612a92565b95945050505050565b90815260200190565b600060208252610fae6020830184612a92565b600060408252612c266040830185612a92565b905060018060a01b03831660208301529392505050565b600060608252612c506060830186612a92565b6001600160a01b039490941660208301525060400152919050565b600060408252612c7e6040830185612a92565b8281036020840152612bee8185612a92565b600060408252612ca36040830185612a92565b90508260208301529392505050565b6020808252602b908201527f417474656d7074696e6720746f2072652d656e7465722066756e6374696f6e2060408201526a7265637572736976656c7960a81b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526025908201527f496e73756666696369656e742062616c616e636520746f206d616b65207472616040820152643739b332b960d91b606082015260800190565b6020808252600e908201526d04661696c656420746f20737761760941b604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526029908201527f43616e206f6e6c792062652063616c6c656420627920736574746c656d656e746040820152680818dbdb9d1c9858dd60ba1b606082015260800190565b6020808252601c908201527f496e73756666696369656e74207370656e6420616c6c6f77616e636500000000604082015260600190565b6020808252600990820152684e6f742072656c617960b81b604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b602080825260139082015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606082015260800190565b6020808252600990820152682737ba1030b236b4b760b91b604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b60808101610fb18284612abe565b82815260a081016123056020830184612abe565b60006101a086356130b1816132eb565b6001600160a01b031683526130cc6020808501908901612afe565b6130dc6060840160608901612afe565b60a0870160c088016130fa60a086016130f5838561262f565b612a5b565b6131048183613207565b91505061311460c0850182612a5b565b5060e087013560e084015261010080880135818501525061012080880135818501525061014080880135818501525085610160840152806101808401526125458184018587612a68565b6001600160701b0396909616865260208601949094526001600160a01b039290921660408501526060840152608083015260a082015260c00190565b6001600160801b0391909116815260200190565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156131db57600080fd5b604052919050565b600067ffffffffffffffff8211156131f9578081fd5b50601f01601f191660200190565b60008235610fae816132eb565b60005b8381101561322f578181015183820152602001613217565b83811115611b055750506000910152565b60e01c90565b600060443d101561325657610d19565b600481823e6308c379a061326a8251613240565b1461327457610d19565b6040513d600319016004823e80513d67ffffffffffffffff81602484011181841117156132a45750505050610d19565b828401925082519150808211156132be5750505050610d19565b503d830160208284010111156132d657505050610d19565b601f01601f1916810160200160405291505090565b6001600160a01b03811681146112b057600080fd5b80151581146112b057600080fd5b6001600160801b03811681146112b057600080fd5b60ff811681146112b057600080fdfe5472616e7366657272696e67207061727469616c20696e70757420746f6b656e20746f206465767465616d20666f72206661696c75726520676173206665657353656e64696e6720666565732066726f6d206f757470757420746f6b656e20746f207465616d2f616666696c69617465546f6b656e207370656e6420646f6573206e6f74206e65656420746f20626520302764206f7574077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d743616e6e6f74207265696d62757273652072656c61792073696e636520646f206e6f74206861766520656e6f7567682066756e6473a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177546656520746f6b656e206973206f75747075743b207468657265666f72652063616e6e6f74207265696d6275727365207465616d20666f72206661696c7572652067617320666565735472616e7366657272696e6720666565732066726f6d20696e70757420746f6b656e20746f206465765465616d2f616666696c69617465a2646970667358221220f6626f87017323f06b642e56ca1f77e867d541754eed2889887db1a9355684a064736f6c63430007000033",
  "libraries": {
    "FeeCalculator": "0x46181DB60480F137Bbd6633B624cc0A7aF2Cfc76",
    "LibAccess": "0x62eCb6e24bD7D53112ebF386718D54A33B3c424E",
    "LibConfig": "0x4D5806D66d4e056d37CCD20133AF8e06A6f5f4e5",
    "ProxyAdmin": "0x71eEC1AECD2255b85eadD7130fA05a4941362E3c",
    "Settlement": "0x53f416f782Ded95285C179F6cEEcA80324Bf4Cf7",
    "SettlementAdmin": "0x71eEC1AECD2255b85eadD7130fA05a4941362E3c",
    "TransparentUpgradeableProxy": "0x3c2918430dbFc84960F554377d9D1248ab1977F0"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositWNative(address,uint256)": {
        "notice": "Team's ability to deposit native token into this contract using wrapped  native asset allowance"
      },
      "getConfig()": {
        "notice": "Get the current configuration struct"
      },
      "getDevTeam()": {
        "notice": "Get the dev team wallet/multi-sig address"
      },
      "getLockoutBlocks()": {
        "notice": "Get the number of blocks to wait before trader can withdraw gas tank funds  marked for withdraw."
      },
      "getMinFee()": {
        "notice": "Get the minimum fee required for all orders"
      },
      "getPenaltyFee()": {
        "notice": "Get the penalty fee to asses when trader removes tokens or funds after Dexible submits orders on-chain."
      },
      "setConfig((address,uint128,uint128,uint8))": {
        "notice": "Set the current configuration as a bulk setting"
      },
      "setDevTeam(address)": {
        "notice": "Set the dev team wallet/multi-sig address"
      },
      "setLockoutBlocks(uint8)": {
        "notice": "Set the number of blocks to wait before thawed withdraws are allowed"
      },
      "setMinFee(uint128)": {
        "notice": "Set the minimum fee for an order execution"
      },
      "setPenaltyFee(uint128)": {
        "notice": "Set the penalty assessed when a user removes tokens or gas tank funds"
      },
      "withdraw(uint256)": {
        "notice": "Team's ability to withdraw ETH balance from the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}